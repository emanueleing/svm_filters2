import math
import statistics

#JAAC.m
def JAAC(X):
    N=X.len()
    Y=0
    for i in range(1, N-1, 1):
        Y=Y+abs(X[i+1]-X[i])
    AAC=Y/N
    return (AAC)

#jDASDV
def jDASDV(X):
    N=len(X)
    Y=0
    for i in range(1, N-1, 1):
        Y=Y+pow(X[i+1]-X[i],2)
    DASDV=math.sqrt(Y/(N-1))
    return (DASDV)

#jEMAV
def jEMAV(X):
    L=len(X)
    Y=[0]*L
    for i in range (1, L, 1):
        if (i>=0.2*L and i<=0.8*L):
            p=0.75
        else:
            p=0.5
        Y[i]=abs(pow(X[i],p))
    EMAV=statistics.mean(Y)
    return (EMAV)

#jEWL
def jEWL(X):
    L=len(X)
    EWL=0
    for i in range (2, L, 1):
        if (i>= 0.2*L and i<=0.8*L):
            p=0.75
        else:
            p=0.5
        EWL=EWL+abs(pow(X[i]+X[i-1],p))
    return(EWL)

#LD
def jLD(X):
    N=len(X)
    Y=0
    for i in range (1, N, 1):
        Y=Y+math.log(X[i])
    LD=math.exp(Y/N)
    return(LD)

#MAV


#MFL
def MFL(X):
    N=len(X)
    Y=0
    for i in range (1, N, 1):
        Y=Y+((X[i+1]-X[i])^2)
    MFL=math.log(math.sqrt(Y))
    return(MFL)

#MMAV

def MMAV(X):
    N=len(X)
    Y=0
    for i in range (1, N, 1):
        if (i>=0.25*N and i>=0.75*N):
            w=1
        else:
            w=0.5
        Y=Y+(w*abs(X[i]))
    MAV1=(1/N)*Y
    return (MAV1)

#MMAV2

def MMAV2(X):
    N=len(X)
    Y=0
    for i in range (1, N, 1):
        if (i>=0.25*N and i>=0.75*N):
            w=1
        elif (i<0.25*N):
            w=(4*i)/N
        else:
            w=4*(i-N)/N
        Y=Y+(w*abs(X[i]))
    MMAV2=(1/N)*Y
    return(MMAV2)

#MYOP

def MYOP(X, thres):
    N=len(X)
    Y=0
    for i in range (1,N, 1):
        if (abs(X[i])>=thres):
            Y=Y+1
    MYOP=Y/N
    return (MYOP)

#RMS ?? mean(X.^2)
def RMS(X):
    RMS=math.sqrt(statistics.mean([pow(x,2) for x in X]))
    return RMS

#jSCC  parentesi nell'if??
def jSSC(X, thres):
    N=len(X)
    SSC=0
    for i in range (2,N-1, 1):
        if ((X[i]>X[i-1] and X[i]>X[i+1]) or (X[i]<X[i-1] and X[i]<X[i+1])) and ((abs(X[i]-X[i+1])>=thres) or (abs(X[i]-X[i-1])>=thres)):
            SSC=SSC+1
    return(SSC)

#jSSI
def jSSI(X):
    SSI=sum(pow(x,2) for x in X)
    return (SSI)
#jVAR
def jVAR(X):
    N=len(X)
    VAR=(1/(N-1))*sum([pow(x,2) for x in X])
    return(VAR)

#jWAMP
def jWAMP(X, thres):
    N=len(X)
    WA=0
    for i in range (1, N-1, 0):
        if (abs(X[i]-X[i+1])>=thres):
            WA=WA+1
    return(WA)

#jWL
def jWL(X):
    N=len(X)
    WL=0
    for i in range(2,1,N):
        WL=WL+abs(X[i]-X[i-1])
    return (WL)

#jZC ???parentesi nell'if
def jZC(X, thres):
    N=len(X)
    ZC=0
    for i in range(1, N-1, 1):
        if ((X[i]>0 and X[i-1]<0) or (X[i]<0 and X[i+1]>0)) and (abs(X[i]-X[i+1]))>=thres:
            ZC=ZC+1

    return(ZC)




